# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158cLL_eY9ln0ABgtq_RKST7jqhlbrnyv

# -*- coding: utf-8 -*-


import streamlit as st
import pandas as pd
import requests

# Page setup
st.set_page_config(page_title="Daleel - Smart Restaurant Recommender", layout="wide")

# ===== Recommendations Section =====
st.title("🍽 Daleel - Smart Restaurant Recommender")

st.subheader("🍽 Get Smart Recommendations")
user_id = st.text_input("User ID", placeholder="e.g., U1077", key="rec_user_id")
category = st.selectbox(
    "Restaurant Category",
    ["All Categories", "American", "Asian", "Sandwich", "Italian", "Grill", "Healthy", "Fast Food", "Noodles"],
    key="rec_category"
)

if st.button("🚀 Get Recommendations"):
    cat_value = category if category != "All Categories" else "all"
    payload = {
        "user_id": user_id,
        "category": cat_value,
        "review_restid": "",
        "new_review": ""
    }

    try:
        response = requests.post("https://7eefa3533be6.ngrok-free.app/recommend", json=payload)
        result = response.json()

        if "error" in result:
            st.error(f"❌ Error: {result['error']}")
        else:
            st.success("✅ Here are your recommendations:")
            for i, item in enumerate(result):
                st.markdown(f"{i+1}. 🍽 {item['res_name']}")
                st.markdown(f"- 📌 Restaurant ID: {item['res_id']}")
                st.markdown(f"- 🏷 Category: {item['category']}")
                st.markdown(f"- ⭐ Predicted Rating: {item['predicted_rating']:.2f}")
                if item.get("reviews"):
                    st.markdown("💬 **User Reviews:**")
                    for rev in item["reviews"]:
                        st.markdown(f"- {rev}")
                st.markdown("---")
    except Exception as e:
        st.error(f"🚨 Failed to connect to the API: {e}")

# ===== Submit Review Section =====
st.subheader("✍️ Submit a New Review (Optional)")
review_restid = st.text_input("Restaurant ID (for the review)", placeholder="e.g., 135082", key="submit_review_id")
new_review = st.text_area("Review Text", key="submit_review_text")

if st.button("📨 Submit Review"):
    if not review_restid.strip() or not new_review.strip():
        st.warning("Please enter the restaurant ID and your review first.")
    else:
        payload = {
            "user_id": user_id,
            "category": "all",
            "review_restid": review_restid,
            "new_review": new_review
        }
        try:
            response = requests.post("https://7eefa3533be6.ngrok-free.app/review", json=payload)
            result = response.json()
            if "error" in result:
                st.error(f"❌ Error: {result['error']}")
            else:
                st.success("✅ Review submitted successfully!")
        except Exception as e:
            st.error(f"🚨 Failed to submit review: {e}")
            "
"""

# -*- coding: utf-8 -*-
"""streamlit_app"""

import streamlit as st
import requests

st.set_page_config(page_title="Daleel - Smart Restaurant Recommender", layout="wide")
BASE_URL = "https://5a9430091f33.ngrok-free.app"  # your API base

st.title("🍽 Daleel - Smart Restaurant Recommender")

st.subheader("🍽 Get Smart Recommendations")
user_id = st.text_input("User ID", placeholder="e.g., U1077", key="rec_user_id")
category = st.selectbox(
    "Restaurant Category",
    ["All Categories", "American", "Asian", "Sandwich", "Italian", "Grill", "Healthy", "Fast Food", "Noodles"],
    key="rec_category"
)

# NEW: City filter
city = st.selectbox(
    "City",
    ["All Cities", "Dammam", "Dhahran", "Jubail", "Khobar"],
    key="rec_city"
)

if st.button("🚀 Get Recommendations"):
    if not user_id.strip():
        st.warning("Please enter your User ID first.")
    else:
        cat_value = category if category != "All Categories" else "all"
        city_value = "all" if city == "All Cities" else city

        payload = {
            "user_id": user_id,
            "category": cat_value,
            "city": city_value            # NEW
        }

        try:
            resp = requests.post(f"{BASE_URL}/recommend", json=payload, timeout=30)
            if resp.status_code != 200:
                st.error(f"❌ API error {resp.status_code}: {resp.text}")
            else:
                result = resp.json()
                if isinstance(result, dict) and "error" in result:
                    st.error(f"❌ {result['error']}")
                else:
                    st.success("✅ Here are your recommendations:")
                    for i, item in enumerate(result):
                        st.markdown(f"{i+1}. 🍽 **{item['res_name']}**")
                        st.markdown(f"- 📌 Restaurant ID: `{item['res_id']}`")
                        st.markdown(f"- 🏷 Category: {item['category']}")
                        st.markdown(f"- 🗺️ City: **{item['city']}**")     # NEW: show city
                        st.markdown(f"- ⭐ Predicted Rating: **{item['predicted_rating']:.2f}**")
                        st.markdown("---")
        except Exception as e:
            st.error(f"🚨 Failed to connect to the API: {e}")

# (your Submit Review section stays the same)


# ===== Submit Review Section =====
st.subheader("✍️ Submit a New Review (Optional)")
review_restid = st.text_input("Restaurant ID (for the review)", placeholder="e.g., 135082", key="submit_review_id")
new_review = st.text_area("Review Text", key="submit_review_text")

if st.button("📨 Submit Review"):
    if not user_id.strip():
        st.warning("Please enter your User ID above before submitting a review.")
    elif not review_restid.strip() or not new_review.strip():
        st.warning("Please enter the restaurant ID and your review first.")
    else:
        # ✅ Minimal: only send what /review expects
        payload = {
            "user_id": user_id,
            "review_restid": review_restid,
            "new_review": new_review
        }
        try:
            resp = requests.post(f"{BASE_URL}/review", json=payload, timeout=30)
            if resp.status_code != 200:
                st.error(f"❌ API error {resp.status_code}: {resp.text}")
            else:
                result = resp.json()
                if isinstance(result, dict) and result.get("success"):
                    st.success("✅ Review submitted successfully!")
                elif isinstance(result, dict) and "error" in result:
                    st.error(f"❌ Error: {result['error']}")
                else:
                    st.info("Review submitted.")
        except Exception as e:
            st.error(f"🚨 Failed to submit review: {e}")
